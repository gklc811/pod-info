#!/usr/bin/env python

from subprocess import Popen, STDOUT, PIPE
from shlex import split
from slackclient import SlackClient
from collections import deque
from os import getcwd, environ

channel_name = "bot_test"
max_error_lines = 5
q = deque(maxlen=max_error_lines)


def slack_message(message, channel):
    message = getcwd() + ":" + message
    token = environ["SLACK_API_TOKEN"]
    sc = SlackClient(token)
    sc.api_call('chat.postMessage', channel=channel, text=message, username='Crash_Report', icon_emoji=':bangbang:')


# Global Error Flag
# err = 0


def error_decider(outstring):
    # global err
    q.append(outstring)
    if ('error' in outstring.lower()):
        slack_message(outstring, channel_name)
        # print_q()
    # if (err > 0 and err <= max_error_lines):
    #     slack_message(outstring, channel_name)
    #     err = err + 1
    #     if (err == max_error_lines):
    #         err = 0


def print_q():
    # global err
    for items in q:
        slack_message(items, channel_name)
    q.clear()
        # err = 1


def run_command(command):
    slack_message("Starting " , channel_name)
    process = Popen(split(command), stdout=PIPE, stderr=STDOUT)
    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            print(output.strip())
            error_decider(output.strip())
    rc = process.poll()
    slack_message("Exited  ", channel_name)
    print_q()
    return rc


run_command('npm start')
